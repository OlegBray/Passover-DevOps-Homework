pipeline {
    agent any
    environment {
        VAULT_ADDR = 'http://vault:8200'
        VAULT_SECRET_PATH = '<Your secret path, make sure if its v1 or v2>'
    }
    stages {
        stage('Read Secret from Vault') {
            steps {
                withCredentials([string(credentialsId: '<Your Token>', variable: 'VAULT_TOKEN')]) {
                    script {
                        try {
                            def response = httpRequest(
                                httpMode: 'GET',
                                url: "${env.VAULT_ADDR}/v1/${env.VAULT_SECRET_PATH}",
                                customHeaders: [[name: 'X-Vault-Token', value: VAULT_TOKEN]],
                                validResponseCodes: '200'
                            )
                            
                            echo "Vault response status: ${response.status}"
                            
                            def json = readJSON text: response.content
                            
                            if (json.data && json.data.data && json.data.data.name) {
                                def nameValue = json.data.data.name
                                echo "âœ… Vault param 'name' = ${nameValue}"
                                
                                env.SECRET_NAME = nameValue
                            } else {
                                error "Secret 'name' not found in Vault response!"
                            }
                        } catch (Exception e) {
                            echo "Error accessing Vault: ${e.message}"
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Use Secret') {
            steps {
                echo "Using secret value: ${env.SECRET_NAME}"
            }
        }
    }
}
