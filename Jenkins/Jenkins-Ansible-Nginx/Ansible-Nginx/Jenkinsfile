pipeline {
    agent any
    environment {
        VAULT_ADDR = 'http://vault:8200'
        AWS_CREDS_PATH = 'secret/data/aws/creds'
    }
    stages {
        stage('Install Dependencies') {
            steps {
                sh '''
                    # Check if we have sudo access
                    if command -v sudo &> /dev/null; then
                        SUDO="sudo"
                    else
                        SUDO=""
                    fi
                    
                    # Check if Python is installed
                    if ! command -v python3 &> /dev/null; then
                        echo "Installing Python 3..."
                        $SUDO apt-get update -y || echo "Warning: apt-get update failed"
                        $SUDO apt-get install -y python3 python3-pip || echo "Warning: Python installation failed"
                    else
                        echo "Python 3 is already installed"
                    fi
                    
                    # Check if pip is installed
                    if ! command -v pip3 &> /dev/null; then
                        echo "Installing pip3..."
                        $SUDO apt-get install -y python3-pip || echo "Warning: pip installation failed"
                    else
                        echo "pip3 is already installed"
                    fi
                    
                    # Install Ansible (try both with and without sudo)
                    if ! command -v ansible &> /dev/null; then
                        echo "Installing Ansible..."
                        $SUDO pip3 install ansible || pip3 install ansible --user || echo "Warning: Ansible installation failed"
                    else
                        echo "Ansible is already installed"
                    fi
                    
                    # Display versions
                    python3 --version || echo "Python not installed"
                    pip3 --version || echo "pip not installed"
                    ansible --version || echo "Ansible not installed"
                '''
            }
        }
        
        stage('Read AWS Credentials from Vault') {
            steps {
                withCredentials([string(credentialsId: 'vault-token', variable: 'VAULT_TOKEN')]) {
                    script {
                        try {
                            def response = httpRequest(
                                httpMode: 'GET',
                                url: "${env.VAULT_ADDR}/v1/${env.AWS_CREDS_PATH}",
                                customHeaders: [[name: 'X-Vault-Token', value: VAULT_TOKEN]],
                                validResponseCodes: '200'
                            )
                            
                            echo "Vault response status: ${response.status}"
                            
                            def json = readJSON text: response.content
                            
                            if (json.data && json.data.data && json.data.data.access_key_id && json.data.data.secret_access_key) {
                                env.AWS_ACCESS_KEY_ID = json.data.data.access_key_id
                                env.AWS_SECRET_ACCESS_KEY = json.data.data.secret_access_key
                                echo "âœ… AWS credentials retrieved successfully"
                            } else {
                                error "AWS credentials not found in Vault response!"
                            }
                        } catch (Exception e) {
                            echo "Error accessing Vault: ${e.message}"
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Install Ansible Galaxy Requirements') {
            steps {
                sh '''
                    # Add ~/.local/bin to PATH if it exists (for user installations)
                    export PATH=$PATH:~/.local/bin
                    
                    # Check for ansible-galaxy
                    which ansible-galaxy || echo "Warning: ansible-galaxy not found in PATH"
                    
                    # Try to install required collections
                    ansible-galaxy collection install community.general || echo "Warning: Failed to install community.general"
                    ansible-galaxy collection install amazon.aws || echo "Warning: Failed to install amazon.aws"
                    
                    # Check if requirements.yml exists
                    if [ -f "requirements.yml" ]; then
                        ansible-galaxy install -r requirements.yml || echo "Warning: Failed to install requirements"
                    else
                        echo "No requirements.yml file found"
                    fi
                '''
            }
        }
        
        stage('Run Ansible Playbook') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", 
                         "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}"]) {
                    sh '''
                        # Add ~/.local/bin to PATH if it exists
                        export PATH=$PATH:~/.local/bin
                        
                        # Print working directory and files
                        pwd
                        ls -la
                        
                        # Check for ansible-playbook
                        which ansible-playbook || echo "Warning: ansible-playbook not found in PATH"
                        
                        # Run ansible-playbook
                        ansible-playbook -i inventory.ini nginx.yml -v || echo "Warning: Ansible playbook execution failed"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            sh 'unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY'
        }
    }
}
